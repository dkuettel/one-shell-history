
next:
x uh i'm using the dev branch to run it, need to change it (again) to be able to dev and use
    x have a submodule and do it the right way on the config side?
        x noticed that if you didnt run setup, and no env there, it will still try and not fail early, but then fail because old python version
        x setup also sets up systemd, but does it handle well if there was another one before (potentially at a different location?)
    x plus make it easy with a subshell to test things
        x maybe source instead of subshell makes it easier? make sure to remove old hooks if any
        x indeed just source a test.zsh, it overwrites previous settings and makes sure
            x that we use bin/osh from here
            x point it to another socket
                x make same osh folder locally, expect for a new fresh local link to an osh file
                x so history is full, but nothing is added by us now
            x and a current server is started there
                x start the server in a terminal interactively so that we can also have breakpoints, not systemd here
            x even if the original stuff is running, that should be fine, the history is then double, but valid
        x or how to easily test things?
        x subshell that bends configuration so that it uses a locally started service
        x but symlink include full archive to have much data
        x and a debug.osh for just this session
        x install as service osh-debug or run in separate tmux pane?
        x plus an easy way to then publish it for me? pull on submodule, restart, and push new submodule head, a script for that?
    x also should then work out with bringing it to the staging instance
        x but not yet nicely because syncthing is not setup
        x anyway try and see how it reacts in this case, then delete, make syncthing, try again
        x ultimately copy the zsh into archive there as well (a bit of duplicates probably)
x probably really require osh in the path, makes things easier?
x merge to main if it makes sense before playing around with other features here
    x make things main instead of master to be modern?
x no more verbose about rpc in the log file? especially for systemd not so much needed, right?
    x if things are good, no message
    x for failures messages
    x maybe once in a while a summary (added xyz in the last 1h?), nah not really
    x but just a catch all to log when we exit, for whatever reason
- agg search or reverse search for current folder instead of current session
    - easy to find something project relevant
    - generally a way to filter also based on folder? if not here but know what it was
- in osh cli py file, global config variable still needed, still need to declare? for reading only no
x ctrl-r should be backward search
    x ctrl-r cycles: backward global, backward session, aggregated filtered, aggregated unfiltered
    x can we go directly with ctrl-1 and so on to a desired one? or tab? or letters? numbers might only work with alt-.
    x but ultimately have everything mappable for users to decide
    x a generic search with type and cycle on tab and shift-tab? not sure how much is shared, except session not-session
        x but the generic needs all context info
        x could that be easier with python 3.10?
    x that's how people use it from before
    x and ctrl-e could be the aggregation
    x or everything is ctrl-r, but you switch modes insides, make principled and easy approach for the navigation abstraction
    x find a better way to make ctrl-r the default and still support new stuff
    x always show in the prompt what it is
    x maybe use headers as well for the search list?
    x need to keep same layout, otherwise tab/shift-tab is jumpy
    x I dont seem to get the results of the testing session, even though they are visible in local.osh, is that one not scanned?
        x ahh true that was by design, local.osh only defines where to add, it's not sourced, rethink if that is nice
        x let's keep the default of symlinking into ./active
        x but also consider local.osh a source, and be robust to duplicate files there
o ctrl-p uses osh, but not arrow-up, that is harder to map?
    x speed good enough? sometimes feels bumpy, could still do it "locally"
    x but "locally" means code needs to be done for every shell
    - is there a way to map ctrl-p to reverse search in session? kinda close to the familiar approach
- smart reuse: use selected command, but translate paths to work for where you are now
    - since we know the original path it was executed in
- readme should mention posh - powered by osh
- what is really slow?
    - ctrl-e is slow even though that requires no aggregation
    - did some improvements, still valid?
- complete/search files/paths from history?
    - sometimes cd to complicated folder cant be searched because we hide cd
    - (but we could go to non-ignored search)
    - generally parse and get most-used files and paths?
- what about knowing about aliases, search also the expanded version?
x is zsh/setup.zsh a good name? it only connects, doesnt setup or install, what do others call themselves?
    x zsh/osh.zsh?
    x or assuming there will be more shells
    x shells/zsh, and then shells/bash and so on
o I dont know what happens when we ctrl-z into background, does it think the command ended, what hooks are called?
    - that seems to be code 148, do we want to filter them differently?
    - also fg then is a command
    - the alternative would be to wrap it, but that seems nasty
x say only once per session that server is not reachable?
    x at least on adding, after all it works, just "worse"
    x in interactive searches we can give a warning in the header or so everytime
    x just so people know why it's slow, if it is
    x adding slowness is not actually noticed really, because it's forked, that's why one message is enough
o make aggregated-filtered just aggregated, the default one should be the short name
- checking man systemd.service again, I think we can just go with type=simple service, so nothing at all
    - the notify doesnt give much benefit, their recommendation is to use simple
    - just the shutdown should remain synchronous, to be sure data is saved?
    - though currently that's not really useful, but at least have it cleanup the command socket?


cleanliness:
- should event-filters.yaml have a new name? config? because it has more than that now
    - or we split it up into different files?


far out:
- could we stream only the simple index to fzf
    - and then inside that process we have a fifo or so for the preview command to fetch the meta data?
    - no more difficult parsing, maybe faster, because we dont have to stream all the data yet, only what's needed


ctrl-p and ctrl-n:
x the original zsh behavior is a bit more complicated, not fully documented, but from observation
x it does prefix search, but it always puts the cursor at the end of the buffer
x not sure how it knows when to use the old prefix for the search and when to use the cursor position
x or if it ever resets it
x it seems that on first ctrl-p it will use whatever is there for prefix
x then it doesnt change it until you make your first own change again, that's the new prefix from there on
x it uses the full buffer as prefix, not the cursor position
x and it always places you at the end
x osh could implement it this way, to be close enough:
    x __osh_prefix_timestamp and __osh_prefix_last
    x on ctrl-p or -n, if prefix_last not set, set it to the full current buffer
    x on search result put it in the buffer and move cursor to the end
    x always on ctrl-p, if buffer==last_result, keep original prefix for search
        x otherwise use current buffer for prefix search
        x ctrl-c clears everything
    x variables: __osh_prefix_timestamp, __osh_prefix_last_prefix, __osh_prefix_last_result
    x or just check if ANY other key has been pressed in the meantime and then reset?
    x I think I just go with ctrl-c or execute resets, but once a prefix is set, that's it
    x then we always put the cursor at the end, seems close enough to original behaviour?
- also put it to the up arrows?
    - up arrows is global and ctrl-p is local?
    - but how is it managed that up-arrow goes up in the multiline command before it goes up in the history? with ctrl-p that problem is not there


now:
x pickle is much faster than json, rpc likes that
    x after that change we are even closer to making it super generic anyway
    x generally also thinking about where we make flush, lets send large pickles whenever possible
    x rpc exception still needed?
    - UniqueCommand sends full counter, too much data?
    - faster now, but is it the speed we can expect? dumping commands list to pickle file is about the same


next:
x esc in fzf makes it fail later, because we dont expect that key?
- see if glob does too much work or even loads wrong files if archive or active is a git folder, ignore dot-folders?
- bin/osh in path, symlink works?
- move master to main also on remote? I think yves needs to know then (?)
    - do it before anyone else uses it
- pylint


nice to have:
- logging? how does it play nice with systemd
    - how about when in direct mode, where we should be quiet
    - use structed logging
- https://github.com/dahlia/iterfzf is interesting
    - see as next step, check what it does
    - is there a better way to combine it? --preview could point to a python function, that would be even nicer
     - ok in our case we could do a request to the server, and maybe easy in linux because it's plain http
- sanity checker for archive, see if any duplicates or stuff
    - especially if you copied one twice earlier and later they will have so much overlap, one should have more (into the future)
    - or based on an incoming file that you point at
- something to test the events-filter file to double check, or add/remove from cli
- version output or so, status of service or other things


sockets and streams:
- do I need to be more careful who closes stuff and who waits?
- like receiver says None when done with results, server stops producing, but server reading None might fail if client already closed?
- is it possible to wait for other side's close?


benchmark:
- pip install vmprof
- needed apt python-dev or python3.0-dev ?
- also needed libunwind-dev


relevant:
- https://github.com/larkery/zsh-histdb
    - saves mostly the same data as osh
    - but not suited for easy synchronization, using a single sqlite db
