
cleanliness:
- should event-filters.yaml have a new name? config? because it has more than that now
    - or we split it up into different files?


ctrl-p and ctrl-n:
x the original zsh behavior is a bit more complicated, not fully documented, but from observation
x it does prefix search, but it always puts the cursor at the end of the buffer
x not sure how it knows when to use the old prefix for the search and when to use the cursor position
x or if it ever resets it
x it seems that on first ctrl-p it will use whatever is there for prefix
x then it doesnt change it until you make your first own change again, that's the new prefix from there on
x it uses the full buffer as prefix, not the cursor position
x and it always places you at the end
x osh could implement it this way, to be close enough:
    x __osh_prefix_timestamp and __osh_prefix_last
    x on ctrl-p or -n, if prefix_last not set, set it to the full current buffer
    x on search result put it in the buffer and move cursor to the end
    x always on ctrl-p, if buffer==last_result, keep original prefix for search
        x otherwise use current buffer for prefix search
        x ctrl-c clears everything
    x variables: __osh_prefix_timestamp, __osh_prefix_last_prefix, __osh_prefix_last_result
    x or just check if ANY other key has been pressed in the meantime and then reset?
    x I think I just go with ctrl-c or execute resets, but once a prefix is set, that's it
    x then we always put the cursor at the end, seems close enough to original behaviour?
- also put it to the up arrows?
    - up arrows is global and ctrl-p is local?
    - but how is it managed that up-arrow goes up in the multiline command before it goes up in the history? with ctrl-p that problem is not there


now:
x pickle is much faster than json, rpc likes that
    x after that change we are even closer to making it super generic anyway
    x generally also thinking about where we make flush, lets send large pickles whenever possible
    x rpc exception still needed?
    - UniqueCommand sends full counter, too much data?
    - faster now, but is it the speed we can expect? dumping commands list to pickle file is about the same


next:
x esc in fzf makes it fail later, because we dont expect that key?
- see if glob does too much work or even loads wrong files if archive or active is a git folder, ignore dot-folders?
- bin/osh in path, symlink works?
- move master to main also on remote? I think yves needs to know then (?)
    - do it before anyone else uses it
- pylint


nice to have:
- logging? how does it play nice with systemd
    - how about when in direct mode, where we should be quiet
    - use structed logging
- https://github.com/dahlia/iterfzf is interesting
    - see as next step, check what it does
    - is there a better way to combine it? --preview could point to a python function, that would be even nicer
     - ok in our case we could do a request to the server, and maybe easy in linux because it's plain http
- sanity checker for archive, see if any duplicates or stuff
    - especially if you copied one twice earlier and later they will have so much overlap, one should have more (into the future)
    - or based on an incoming file that you point at
- something to test the events-filter file to double check, or add/remove from cli
- version output or so, status of service or other things


sockets and streams:
- do I need to be more careful who closes stuff and who waits?
- like receiver says None when done with results, server stops producing, but server reading None might fail if client already closed?
- is it possible to wait for other side's close?


benchmark:
- pip install vmprof
- needed apt python-dev or python3.0-dev ?
- also needed libunwind-dev


relevant:
- https://github.com/larkery/zsh-histdb
    - saves mostly the same data as osh
    - but not suited for easy synchronization, using a single sqlite db
