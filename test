#!/bin/zsh
set -eu -o pipefail

# test the current checkout, temporarily masking actual service in systemd and ~/.osh
# only works inside tmux
# only works if your zsh init scripts respect $OSH_TESTING
# it will start a server on a new pane (with remain-on-exit on)
# and then start a subshell that uses that development server
# when you exit the subshell, the server will also be stopped
# $base/.osh-test contains a mocked version of ~/.osh to play with
# delete it if you want to redo the mock (some things are copied)


[[ -v TMUX ]]

base=${0:A:h}
osh_home=$base/.osh-test

( # mock dot folder
    mkdir -p $osh_home
    cd $osh_home
    [[ -e active ]] || ln -sfT ~/.osh/active active
    [[ -e archive ]] || ln -sfT ~/.osh/archive archive
    [[ -e event-filters.yaml ]] || cp ~/.osh/event-filters.yaml .
    [[ -e local.osh ]] || touch local.osh
)

pane=$(tmux split-window -dvP -e OSH_HOME=$osh_home $base/bin/osh run-server)
tmux set-option -p -t $pane remain-on-exit on  # race condition, would be better to set a creation time

until OSH_HOME=$osh_home $base/bin/osh is-server-alive; do sleep 1s; done

OSH_TESTING=$base OSH_HOME=$osh_home zsh

OSH_HOME=$osh_home $base/bin/osh stop-server
while OSH_HOME=$osh_home $base/bin/osh is-server-alive; do sleep 1s; done
sleep 1s
tmux kill-pane -t $pane
